# -*- coding: utf-8 -*-
"""Numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JQknVImjk7vbccgvNszlMi80Cq9syoI6
"""

import numpy as np

"""#Numpy ile Nokta Doğru Düzlem ve Uzay"""

skaler=np.array(90)
print(skaler)

vektor=np.array([1,2,3,4,5,6])
print(vektor)

matris=np.array([[1,2,3],[4,5,6],[7,8,9]])
print(matris)

tensor = np.array([
    [[1,2,3], [4,5,6]],
    [[1,2,3], [4,5,6]],
    [[1,2,3], [4,5,6]]
])

print(tensor)

"""# Neden Numpy ?"""

# Bu işlemi numpy olmadan yapsaydık 100 kat daha yavaş sonuç alırdık.Yani numpy 100 kat hız kazandırır.
import time
z1=time.time()

liste1=np.arange(1_000_000)**100

z2=time.time()

print(z2-z1)

"""#VEKTÖRLERDE index ve slice"""

###index
vektor=np.array([1,2,3,4,5])
vektor[-1]

###slice
vektor[1:4:2]

"""#size shape ndim dtype"""

vektor=np.array([1,2,3,4,5,6,7,8,9])
matris=np.array([[1,2,3],[4,5,6],[7,8,9]])

vektor.size#eleman sayısını verir

matris.size

vektor.shape#burda tek boyutlu olduğu için eleman sayısı ve hiç bir şey yazmaz boyutsuz çünkü

matris.shape#burda 3 tane [] var onların içinde 3 tane eleman var o yüzden (3,3)

vektor.ndim#boyut sayısını verir

matris.ndim

vektor.dtype# elemanların tipini gösterir(numpy nin type() ı )

matris.dtype

type(vektor)

type(matris)

"""# Numpy veri değiştirme"""

sayilar=np.array([1,2,3,4,5,6,7,8,9],dtype="float64")
sayilar

sayilar=sayilar.astype("int32")
sayilar

tarih=np.array(["2025-04-27"])
tarih.dtype#çıktısı obje şeklinde olur

tarih=tarih.astype("datetime64")#tarih i tarih değişkenine atıyoruz işimiz kolay olsun
tarih.dtype

"""#MATRİSLERDE slice"""

matris=np.array([[1,2,3],[4,5,6],[7,8,9]])

matris[0:3,0]#virgülün sol tarafı [] alır,sağ tarafıda onlaın içindekilerde işlem yapmaı sağlar.(sonuç 0 dan 3 e kadar alır.onların 0. elemanını yazdırır)

dir(np.random)#👉 dir() Python'da bir nesnenin içindeki tüm özellikleri (fonksiyonlar, değişkenler, vs.) listeleyen yerleşik (built-in) bir fonksiyondur.

"""# Random vektör ya da matris ya da diğer şeyler oluşturma"""

np.random.randint(0,5)

np.random.randint(0,5,(3,6))

np.random.randint(0,5,(3,8))/10

"""# linspace reshape view copy"""

np.linspace(0,10,5)#0 dan 10 a kadar(10 dahil burda) aralığı 5 eşit parçaya böler

m1=np.random.randint(0,20,(3,4))
m1

m1.reshape(6,2)#tekrar boyutlandırır

matris1=np.random.randint(0,20,(3,4))
matris2=matris1.view()#view matris1 i matris2 ye kopyalar.matris2 deki değişiklikler matris1 e etki eder.
matris2

matris3=np.random.randint(0,20,(3,4))
matris4=matris3.copy()#view matris1 i matris2 ye kopyalar.matris2 deki değişiklikler matris1 e etki etmez.
matris4

matris=np.ones((3,4))#1 le 3,4 lük matris oluşturur
matris

matris=np.zeros((4,5))#0 la 4,5 lik matris oluşturur
matris

matris=np.full((3,4),5)#5 le 3,4 lük matris oluşturur
matris

"""#eye diag identity"""

np.identity(5)#5 lik birim matrisin 1 ile köşegenini oluşturur

np.eye(5,k=2)#5 lik birim matrisin 1 ile köşegenini oluşturur ama bunda köşegenin yerini ayarlayabilirsin(ters yön için - kullanıyon)

np.diag([1,2,3,4,555])#köşegeni kendin ayarlıyon

r=np.random.randint(0,10,(3,3))
r

np.diag(r)

np.diag(np.diag(r))#köşegenini aldık

"""# 4 İŞLEM"""

#pythonda bölmede sadece tam kısmını almak istiyorsan // kullanacan
5//2

m1=np.random.randint(0,10,(3,3))
m2=np.random.randint(0,10,(3,3))

m1+m2

m1*m2

m1/m2

m1//m2

m3=np.random.randint(0,10,(5,5))

#matrisler aynı boyutta olmalı işlem yapabilmek için aynı boyuta eşitlemen lazım

m3.reshape(25)[:9].reshape((3,3))+m2

"""#Numpy ile Mantıksal operatörler ve filtreleme"""

#numpyde pythondaki and or not yerine & | ~ kullanılır

m1=np.random.randint(2,10,(3,4))

m1[m1%2==0]#böyle çıktıları dizi olarak verir

cift=m1%2==0
tek=~cift

m1[cift]

m1[tek]

#böyle oluşturabilirsin